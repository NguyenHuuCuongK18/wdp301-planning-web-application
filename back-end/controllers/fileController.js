const fs = require('fs');
const fsPromises = require('fs').promises;
const path = require('path');
const { google } = require('googleapis');
const jwt = require('jsonwebtoken');
const GoogleToken = require('../models/googleTokenModel');
const Task = require('../models/taskModel');
const File = require('../models/fileModel');
const AppError = require('../utils/appError');
const {
  authorize,
  saveCredentials,
  getCombinedAuthUrl,
} = require('../utils/googleAuthUtils');
const NotificationService = require('../services/NotificationService');
const { getAdminId } = require('../utils/admin');
const { createContentDispositionHeader } = require('../utils/fileUtils');
const ActivityLog = require('../models/activityLogModel');
const { formatDateToTimeZone } = require('../utils/dateUtils');
const { emitToBoard, emitToUser } = require('../utils/socket');

const SERVICE_SCOPES = {
  drive: [
    'https://www.googleapis.com/auth/drive.file',
    'https://www.googleapis.com/auth/drive.metadata.readonly',
  ],
  meet: ['https://www.googleapis.com/auth/meetings.space.created'],
  calendar: ['https://www.googleapis.com/auth/calendar'],
};

const DRIVE_SCOPES = SERVICE_SCOPES.drive;

exports.getGoogleAuthUrl = async (req, res, next) => {
  try {
    if (!req.user || !req.user._id) {
      return next(new AppError('Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p', 401));
    }
    const userId = req.user._id;
    const services = ['drive', 'meet', 'calendar'];

    const authUrl = await getCombinedAuthUrl(userId, services);
    if (!authUrl) {
      return res.status(200).json({
        status: 'success',
        message: 'ƒê√£ c√≥ t·∫•t c·∫£ scopes c·∫ßn thi·∫øt',
      });
    }

    const state = jwt.sign({ userId, services }, process.env.JWT_SECRET, {
      expiresIn: '10m',
    });
    console.log('getGoogleAuthUrl - created state:', state);

    const urlWithState = new URL(authUrl);
    urlWithState.searchParams.set('state', state);

    res.status(200).json({
      status: 'success',
      data: { authUrl: urlWithState.toString() },
    });
  } catch (error) {
    console.error('Error getting Google auth URL:', error.message);
    next(new AppError('Error getting Google auth URL: ' + error.message, 500));
  }
};

exports.checkGoogleAuth = async (req, res, next) => {
  try {
    const userId = req.user._id;
    console.log('userId', userId);
    const services = ['drive', 'meet', 'calendar'];

    console.log(`üîç Checking Google auth for user: ${userId}`);

    const tokens = await GoogleToken.find({
      userId,
      service: { $in: services },
      status: 'active',
    });

    console.log(`üìä Found ${tokens.length} tokens for user`);

    // Log detailed token expiry information
    tokens.forEach((token) => {
      const now = Date.now();
      const expiryDate = token.expiryDate;
      const timeUntilExpiry = expiryDate ? expiryDate - now : null;
      const hoursUntilExpiry = timeUntilExpiry
        ? Math.round(timeUntilExpiry / (1000 * 60 * 60))
        : null;

      console.log(`
üîê Token for service: ${token.service}
   Status: ${token.status}
   Expiry date: ${
     expiryDate ? new Date(expiryDate).toLocaleString() : 'No expiry set'
   }
   Time until expiry: ${hoursUntilExpiry ? `${hoursUntilExpiry} hours` : 'N/A'}
   Has refresh token: ${token.refreshToken ? 'Yes' : 'No'}
   Scopes: ${token.scopes.join(', ')}
      `);
    });

    const requiredScopes = services.flatMap(
      (service) => SERVICE_SCOPES[service] || []
    );
    const existingScopes = tokens.flatMap((token) => token.scopes);
    const missingScopes = requiredScopes.filter(
      (scope) => !existingScopes.includes(scope)
    );

    // Check token expiry and try to refresh if possible
    const validTokens = [];
    const expiredTokens = [];
    const refreshFailedTokens = [];

    for (const token of tokens) {
      if (!token.expiryDate || token.expiryDate > Date.now()) {
        validTokens.push(token);
        continue;
      }

      if (!token.refreshToken) {
        expiredTokens.push(token);
        continue;
      }

      try {
        const client = new google.auth.OAuth2(
          process.env.GOOGLE_CLIENT_ID,
          process.env.GOOGLE_CLIENT_SECRET,
          process.env.GOOGLE_REDIRECT_URI
        );
        client.setCredentials({
          refresh_token: token.refreshToken,
        });

        const { credentials } = await client.refreshAccessToken();

        // Update token in database
        await GoogleToken.updateOne(
          { _id: token._id },
          {
            accessToken: credentials.access_token,
            expiryDate: credentials.expiry_date,
            status: 'active',
            updatedAt: Date.now(),
          }
        );

        validTokens.push({
          ...token.toObject(),
          accessToken: credentials.access_token,
          expiryDate: credentials.expiry_date,
        });
      } catch (error) {
        console.error(
          `Failed to refresh token for service ${token.service}:`,
          error
        );
        refreshFailedTokens.push(token);

        // Mark token as expired
        await GoogleToken.updateOne({ _id: token._id }, { status: 'expired' });
      }
    }

    const existingTokensCount = tokens.length;
    const needsReauth =
      expiredTokens.length > 0 || refreshFailedTokens.length > 0;

    console.log(
      `üîç Missing scopes: ${missingScopes.length}, Valid tokens: ${validTokens.length}, ` +
        `Expired tokens: ${expiredTokens.length}, Refresh failed: ${refreshFailedTokens.length}, ` +
        `Required services: ${services.length}`
    );

    // If we have all required valid tokens and scopes
    if (missingScopes.length === 0 && validTokens.length >= services.length) {
      console.log('‚úÖ User has all valid Google tokens');
      res.status(200).json({
        status: 'success',
        message: 'ƒê√£ x√°c th·ª±c t·∫•t c·∫£ d·ªãch v·ª•',
        hasValidTokens: true,
        existingTokens: existingTokensCount,
        validTokensCount: validTokens.length,
        totalServicesRequired: services.length,
        tokens: validTokens.map((token) => ({
          service: token.service,
          status: token.status,
          expiryDate: token.expiryDate,
          isValid: true,
          scopes: token.scopes,
        })),
      });
    } else if (validTokens.length > 0) {
      // User has some valid tokens but needs reauth for others
      console.log('üîÑ User has some valid tokens but needs reauth for others');
      res.status(200).json({
        status: 'success',
        message: needsReauth
          ? 'M·ªôt s·ªë token ƒë√£ h·∫øt h·∫°n, c·∫ßn x√°c th·ª±c l·∫°i'
          : 'C·∫ßn x√°c th·ª±c th√™m quy·ªÅn',
        hasValidTokens: false,
        needsRefresh: true,
        existingTokens: existingTokensCount,
        validTokensCount: validTokens.length,
        expiredTokensCount: expiredTokens.length + refreshFailedTokens.length,
        totalServicesRequired: services.length,
        missingScopes: missingScopes,
        tokens: [
          ...validTokens.map((token) => ({
            service: token.service,
            status: token.status,
            expiryDate: token.expiryDate,
            isValid: true,
            scopes: token.scopes,
          })),
          ...expiredTokens.map((token) => ({
            service: token.service,
            status: 'expired',
            expiryDate: token.expiryDate,
            isValid: false,
            scopes: token.scopes,
          })),
          ...refreshFailedTokens.map((token) => ({
            service: token.service,
            status: 'refresh_failed',
            expiryDate: token.expiryDate,
            isValid: false,
            scopes: token.scopes,
          })),
        ],
      });
    } else {
      // User has no valid tokens
      console.log('‚ùå User has no valid Google tokens');
      res.status(401).json({
        status: 'error',
        message: 'Ch∆∞a x√°c th·ª±c ƒë·∫ßy ƒë·ªß c√°c d·ªãch v·ª•',
        hasValidTokens: false,
        needsRefresh: false,
        existingTokens: 0,
        validTokensCount: 0,
        totalServicesRequired: services.length,
        tokens: [],
      });
    }
  } catch (error) {
    console.error('‚ùå Error checking Google auth:', error.message);
    next(new AppError('Error checking Google auth: ' + error.message, 500));
  }
};

exports.handleGoogleAuthCallback = async (req, res, next) => {
  try {
    const { code, state } = req.query;
    console.log('handleGoogleAuthCallback - code:', code);
    console.log('handleGoogleAuthCallback - raw state:', state);

    if (!code || !state) {
      return next(new AppError('M√£ x√°c th·ª±c ho·∫∑c state kh√¥ng h·ª£p l·ªá', 400));
    }

    let decoded;
    try {
      const decodedState = decodeURIComponent(state);
      console.log('handleGoogleAuthCallback - decoded state:', decodedState);

      decoded = jwt.verify(decodedState, process.env.JWT_SECRET);
      console.log('handleGoogleAuthCallback - verified state:', decoded);

      if (!decoded.userId || !decoded.services) {
        return next(new AppError('State kh√¥ng h·ª£p l·ªá', 400));
      }
    } catch (error) {
      console.error('JWT verification error:', error.message);
      return next(new AppError('State kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ b·ªã thay ƒë·ªïi', 400));
    }

    const { userId, services } = decoded;
    const client = new google.auth.OAuth2(
      process.env.GOOGLE_CLIENT_ID,
      process.env.GOOGLE_CLIENT_SECRET,
      process.env.GOOGLE_REDIRECT_URI
    );

    const { tokens } = await client.getToken(code);
    client.setCredentials(tokens);

    // L∆∞u token cho t·ª´ng d·ªãch v·ª• v·ªõi scope ri√™ng bi·ªát
    for (const service of services) {
      const scopes = SERVICE_SCOPES[service] || [];
      if (scopes.length > 0) {
        await saveCredentials(client, userId, service, scopes);
        console.log(`ƒê√£ l∆∞u token cho d·ªãch v·ª•: ${service}`);
      }
    }

    //G·ª≠i th√¥ng b√°o cho user sau khi x√°c th·ª±c th√†nh c√¥ng
    await NotificationService.createPersonalNotification({
      title: 'Google Authentication Successful',
      content:
        // 'B·∫°n ƒë√£ x√°c th·ª±c th√†nh c√¥ng t√†i kho·∫£n Google. Gi·ªù ƒë√¢y b·∫°n c√≥ th·ªÉ ti·∫øp t·ª•c s·ª≠ d·ª•ng d·ªãch v·ª• c·ªßa ch√∫ng t√¥i.',
        'You have successfully authenticated your Google account. You can now continue using our services.',
      type: 'google_auth',
      targetUserId: userId,
      targetWorkspaceId: null,
      createdBy: getAdminId(),
      relatedUserId: null,
      eventId: null,
      taskId: null,
      messageId: null,
    });

    res.redirect(process.env.FRONTEND_URL || 'http://localhost:5173');
  } catch (error) {
    console.error('Error handling Google auth callback:', error.message);
    const errorMessage = req.query.error
      ? decodeURIComponent(req.query.error)
      : 'Error handling Google auth callback: ' + error.message;
    res.status(400).json({
      status: 'error',
      message: errorMessage,
    });
  }
};

//T√°c ƒë·ªông t·ªõi c√°c file ƒë√£ ƒë∆∞·ª£c ng∆∞·ªùi d√πng t·∫°o t·ª´ trong ·ª©ng d·ª•ng (ƒë√£ ƒë·ªìng b·ªô v·ªõi google drive)
exports.uploadFile = async (req, res, next) => {
  try {
    const userId = req.user._id;
    const file = req.file;
    if (!file) {
      return next(new AppError('Ch∆∞a ch·ªçn file ƒë·ªÉ t·∫£i l√™n', 400));
    }

    const auth = await authorize(userId, 'drive', DRIVE_SCOPES);
    const drive = google.drive({ version: 'v3', auth });

    // ƒê·∫£m b·∫£o t√™n file ƒë∆∞·ª£c encode ƒë√∫ng UTF-8 cho Google Drive
    const sanitizedFileName = file.originalname.normalize('NFC');
    const fileMetadata = {
      name: sanitizedFileName,
      parents: ['root'],
    };
    const media = {
      mimeType: file.mimetype,
      body: fs.createReadStream(file.path),
    };

    const { data } = await drive.files.create({
      resource: fileMetadata,
      media,
      fields: 'id, name, webViewLink',
    });

    await fsPromises.unlink(file.path);

    res.status(200).json({
      status: 'success',
      data: {
        fileId: data.id,
        fileName: data.name,
        webViewLink: data.webViewLink,
      },
    });
  } catch (error) {
    console.error('Error uploading file:', error.message);
    next(new AppError('Error uploading file: ' + error.message, 500));
  }
};

//T√≠ch h·ª£p file v√†o task
exports.uploadFileToTask = async (req, res, next) => {
  try {
    const userId = req.user._id;
    const { taskId } = req.body; // Nh·∫≠n taskId t·ª´ request
    const file = req.file;
    if (!file) {
      return next(new AppError('Ch∆∞a ch·ªçn file ƒë·ªÉ t·∫£i l√™n', 400));
    }
    if (!taskId) {
      return next(new AppError('Vui l√≤ng cung c·∫•p taskId', 400));
    }

    // Ki·ªÉm tra task t·ªìn t·∫°i v√† ng∆∞·ªùi d√πng c√≥ quy·ªÅn
    const task = await Task.findById(taskId);
    if (!task) {
      return next(new AppError('Kh√¥ng t√¨m th·∫•y task', 404));
    }
    // Ki·ªÉm tra quy·ªÅn: user ph·∫£i l√† assignedTo, assignedBy, ho·∫∑c n·∫øu task ch∆∞a assign th√¨ assignedBy c√≥ quy·ªÅn
    const isAssignedTo = task.assignedTo && task.assignedTo.equals(userId);
    const isAssignedBy = task.assignedBy && task.assignedBy.equals(userId);

    if (!isAssignedTo && !isAssignedBy) {
      return next(
        new AppError('B·∫°n kh√¥ng c√≥ quy·ªÅn th√™m file v√†o task n√†y', 403)
      );
    }

    // T·∫£i file l√™n Google Drive
    const auth = await authorize(userId, 'drive', DRIVE_SCOPES);
    const drive = google.drive({ version: 'v3', auth });

    // ƒê·∫£m b·∫£o t√™n file ƒë∆∞·ª£c encode ƒë√∫ng UTF-8 cho Google Drive
    const sanitizedFileName = file.originalname.normalize('NFC');
    const fileMetadata = {
      name: sanitizedFileName,
      parents: ['root'],
    };
    const media = {
      mimeType: file.mimetype,
      body: fs.createReadStream(file.path),
    };
    const { data } = await drive.files.create({
      resource: fileMetadata,
      media,
      fields: 'id, name, webViewLink, mimeType',
    });

    // L∆∞u v√†o model File
    const fileDoc = await File.create({
      name: data.name,
      url: data.webViewLink,
      googleDriveFileId: data.id,
      type: data.mimeType.includes('image')
        ? 'image'
        : data.mimeType.includes('pdf')
        ? 'pdf'
        : data.mimeType.includes('document')
        ? 'doc'
        : 'other',
      size: file.size,
      uploadedBy: userId,
      taskId,
    });

    // Th√™m file v√†o task
    task.documents.push(fileDoc._id);
    await task.save();

    // Ghi activity log
    try {
      const log = await ActivityLog.create({
        boardId: task.boardId,
        userId: userId,
        action: 'task_document_added',
        targetId: task._id,
        targetType: 'task',
        details: `File "${data.name}" uploaded to task "${task.title}"`,
        isVisible: true,
      });

      // Emit to board members
      const formattedLog = {
        logId: log._id,
        boardId: log.boardId,
        userId: log.userId,
        userName: req.user.fullname || 'Unknown User',
        action: log.action,
        details: log.details,
        isVisible: log.isVisible,
        createdAt: formatDateToTimeZone(log.createdAt),
      };

      emitToBoard(task.boardId.toString(), 'new_activity', formattedLog);

      // Send notification to assigned user if different from uploader
      if (task.assignedTo && !task.assignedTo.equals(userId)) {
        await NotificationService.createPersonalNotification({
          title: 'New file is added to task',
          content: `File "${data.name}" is added to task "${task.title}"`,
          type: 'task_document_added',
          targetUserId: task.assignedTo,
          targetWorkspaceId: task.workspaceId,
          createdBy: userId,
          taskId: task._id,
        });
      }
    } catch (logError) {
      console.error('Error creating activity log for file upload:', logError);
    }

    // X√≥a file t·∫°m tr√™n server
    await fsPromises.unlink(file.path);

    res.status(200).json({
      status: 'success',
      data: {
        fileId: data.id,
        fileName: data.name,
        webViewLink: data.webViewLink,
        fileDocId: fileDoc._id,
      },
    });
  } catch (error) {
    console.error('Error uploading file:', error.message);
    next(new AppError('Error uploading file: ' + error.message, 500));
  }
};

exports.downloadFile = async (req, res, next) => {
  try {
    const userId = req.user._id;
    const { fileDocId } = req.params;

    const fileDoc = await File.findById(fileDocId).populate('taskId');
    if (!fileDoc || fileDoc.isDeleted) {
      return next(new AppError('Kh√¥ng t√¨m th·∫•y file ho·∫∑c file ƒë√£ b·ªã x√≥a', 404));
    }
    const task = fileDoc.taskId;
    // Ki·ªÉm tra quy·ªÅn: user ph·∫£i l√† assignedTo, assignedBy, ho·∫∑c ng∆∞·ªùi upload file
    const isAssignedTo = task.assignedTo && task.assignedTo.equals(userId);
    const isAssignedBy = task.assignedBy && task.assignedBy.equals(userId);
    const isUploader = fileDoc.uploadedBy.equals(userId);

    if (!isAssignedTo && !isAssignedBy && !isUploader) {
      return next(new AppError('B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p file n√†y', 403));
    }

    const auth = await authorize(userId, 'drive', DRIVE_SCOPES);
    const drive = google.drive({ version: 'v3', auth });
    const { data } = await drive.files.get(
      { fileId: fileDoc.googleDriveFileId, alt: 'media' },
      { responseType: 'stream' }
    );

    // Set headers v·ªõi t√™n file an to√†n
    res.setHeader('Content-Type', fileDoc.type || 'application/octet-stream');
    res.setHeader(
      'Content-Disposition',
      createContentDispositionHeader(fileDoc.name)
    );
    data.pipe(res);
  } catch (error) {
    // console.error('L·ªói khi t·∫£i file:', error.message);
    next(new AppError('T·∫£i file th·∫•t b·∫°i: ' + error.message, 500));
  }
};

exports.listFiles = async (req, res, next) => {
  try {
    const userId = req.user._id;
    const { taskId } = req.params;

    // Ki·ªÉm tra quy·ªÅn truy c·∫≠p task (n·∫øu c√≥ taskId)
    if (taskId) {
      const task = await Task.findById(taskId);
      if (!task) {
        return next(new AppError('Kh√¥ng t√¨m th·∫•y task', 404));
      }
      // Ki·ªÉm tra quy·ªÅn: user ph·∫£i l√† assignedTo ho·∫∑c assignedBy
      const isAssignedTo = task.assignedTo && task.assignedTo.equals(userId);
      const isAssignedBy = task.assignedBy && task.assignedBy.equals(userId);

      if (!isAssignedTo && !isAssignedBy) {
        return next(new AppError('B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p task n√†y', 403));
      }
    }

    // L·∫•y file t·ª´ model File
    const query = { uploadedBy: userId, isDeleted: false };
    if (taskId) query.taskId = taskId;
    const files = await File.find(query).select(
      'name url googleDriveFileId type size'
    );

    res.status(200).json({
      status: 'success',
      data: files,
    });
  } catch (error) {
    console.error('Error listing files:', error.message);
    next(new AppError('Error listing files: ' + error.message, 500));
  }
};

// Xem/t·∫£i file
// Cho ph√©p ng∆∞·ªùi d√πng trong task xem file (qua webViewLink) ho·∫∑c t·∫£i file v·ªÅ ·ª©ng d·ª•ng.
// ƒê·∫£m b·∫£o quy·ªÅn truy c·∫≠p b·∫±ng c√°ch chia s·∫ª file tr√™n Google Drive v·ªõi ng∆∞·ªùi d√πng trong task
exports.getFile = async (req, res, next) => {
  try {
    const userId = req.user._id;
    const { fileDocId } = req.params; // ID c·ªßa document trong model File

    // Ki·ªÉm tra file trong model File
    const fileDoc = await File.findById(fileDocId).populate('taskId');
    if (!fileDoc || fileDoc.isDeleted) {
      return next(new AppError('Kh√¥ng t√¨m th·∫•y file ho·∫∑c file ƒë√£ b·ªã x√≥a', 404));
    }

    // Ki·ªÉm tra quy·ªÅn truy c·∫≠p: user ph·∫£i l√† assignedTo, assignedBy, ho·∫∑c ng∆∞·ªùi upload file
    const task = fileDoc.taskId;
    const isAssignedTo = task.assignedTo && task.assignedTo.equals(userId);
    const isAssignedBy = task.assignedBy && task.assignedBy.equals(userId);
    const isUploader = fileDoc.uploadedBy.equals(userId);

    if (!isAssignedTo && !isAssignedBy && !isUploader) {
      return next(new AppError('B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p file n√†y', 403));
    }

    // Tr·∫£ v·ªÅ th√¥ng tin file
    res.status(200).json({
      status: 'success',
      data: {
        fileId: fileDoc.googleDriveFileId,
        name: fileDoc.name,
        url: fileDoc.url,
        type: fileDoc.type,
        size: fileDoc.size,
      },
    });
  } catch (error) {
    console.error('Error getting file:', error.message);
    next(new AppError('Error getting file: ' + error.message, 500));
  }
};

exports.shareFileWithTaskUsers = async (req, res, next) => {
  try {
    const userId = req.user._id;
    const { fileDocId, taskId } = req.body;

    // Ki·ªÉm tra file v√† task
    const fileDoc = await File.findById(fileDocId);
    if (!fileDoc || fileDoc.isDeleted) {
      return next(new AppError('Kh√¥ng t√¨m th·∫•y file ho·∫∑c file ƒë√£ b·ªã x√≥a', 404));
    }
    const task = await Task.findById(taskId).populate('assignedTo assignedBy');
    if (!task) {
      return next(new AppError('Kh√¥ng t√¨m th·∫•y task', 404));
    }
    if (!fileDoc.uploadedBy.equals(userId)) {
      return next(new AppError('B·∫°n kh√¥ng c√≥ quy·ªÅn chia s·∫ª file n√†y', 403));
    }

    // Chia s·∫ª file tr√™n Google Drive v·ªõi assignedTo v√† assignedBy
    const auth = await authorize(userId, 'drive', DRIVE_SCOPES);
    const drive = google.drive({ version: 'v3', auth });
    // const users = [task.assignedTo, task.assignedBy].filter(Boolean);
    const users = [task.assignedTo].filter(Boolean); //Chia s·∫ª quy·ªÅn reader v·ªõi ng∆∞·ªùi ƒë∆∞·ª£c giao nhi·ªám v·ª•
    for (const user of users) {
      if (user.email) {
        await drive.permissions.create({
          fileId: fileDoc.googleDriveFileId,
          resource: {
            type: 'user',
            role: 'reader',
            emailAddress: user.email,
          },
          fields: 'id',
        });
      }
    }

    // Ghi activity log
    try {
      const log = await ActivityLog.create({
        boardId: task.boardId,
        userId: userId,
        action: 'task_document_shared',
        targetId: task._id,
        targetType: 'task',
        details: `File "${fileDoc.name}" shared with task members for task "${task.title}"`,
        isVisible: true,
      });

      // Emit to board members
      const formattedLog = {
        logId: log._id,
        boardId: log.boardId,
        userId: log.userId,
        userName: req.user.fullname || 'Unknown User',
        action: log.action,
        details: log.details,
        isVisible: log.isVisible,
        createdAt: formatDateToTimeZone(log.createdAt),
      };

      emitToBoard(task.boardId.toString(), 'new_activity', formattedLog);

      // Send notification to shared users
      for (const user of users) {
        if (!user._id.equals(userId)) {
          await NotificationService.createPersonalNotification({
            title: 'File is shared with you',
            content: `File "${fileDoc.name}" in task "${task.title}" is shared with you.`,
            type: 'file_shared',
            targetUserId: user._id,
            targetWorkspaceId: task.workspaceId,
            createdBy: userId,
            taskId: task._id,
          });
        }
      }
    } catch (logError) {
      console.error('Error creating activity log for file sharing:', logError);
    }

    res.status(200).json({
      status: 'success',
      message: 'Share file successfully with task users',
    });
  } catch (error) {
    console.error('Error sharing file:', error.message);
    next(new AppError('Error sharing file: ' + error.message, 500));
  }
};

//Cho ph√©p s·ª≠a t√™n ho·∫∑c n·ªôi dung file tr√™n Google Drive
exports.updateFile = async (req, res, next) => {
  try {
    const userId = req.user._id;
    const { fileDocId, newName } = req.body; // S·ª≠ d·ª•ng fileDocId t·ª´ model File

    // Ki·ªÉm tra file trong model File
    const fileDoc = await File.findById(fileDocId).populate('taskId');
    if (!fileDoc || fileDoc.isDeleted) {
      return next(new AppError('Kh√¥ng t√¨m th·∫•y file ho·∫∑c file ƒë√£ b·ªã x√≥a', 404));
    }
    if (!fileDoc.uploadedBy.equals(userId)) {
      return next(new AppError('B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠a file n√†y', 403));
    }

    const oldName = fileDoc.name;

    // C·∫≠p nh·∫≠t tr√™n Google Drive
    const auth = await authorize(userId, 'drive', DRIVE_SCOPES);
    const drive = google.drive({ version: 'v3', auth });
    const fileMetadata = { name: newName || fileDoc.name };
    const { data } = await drive.files.update({
      fileId: fileDoc.googleDriveFileId,
      resource: fileMetadata,
      fields: 'id, name, webViewLink',
    });

    // C·∫≠p nh·∫≠t model File
    fileDoc.name = data.name;
    fileDoc.url = data.webViewLink;
    await fileDoc.save();

    // Ghi activity log n·∫øu file thu·ªôc v·ªÅ task
    if (fileDoc.taskId) {
      try {
        const task = fileDoc.taskId;
        const log = await ActivityLog.create({
          boardId: task.boardId,
          userId: userId,
          action: 'task_document_renamed',
          targetId: task._id,
          targetType: 'task',
          details: `File renamed from "${oldName}" to "${data.name}" in task "${task.title}"`,
          isVisible: true,
        });

        // Emit to board members
        const formattedLog = {
          logId: log._id,
          boardId: log.boardId,
          userId: log.userId,
          userName: req.user.fullname || 'Unknown User',
          action: log.action,
          details: log.details,
          isVisible: log.isVisible,
          createdAt: formatDateToTimeZone(log.createdAt),
        };

        emitToBoard(task.boardId.toString(), 'new_activity', formattedLog);
      } catch (logError) {
        console.error('Error creating activity log for file rename:', logError);
      }
    }

    res.status(200).json({
      status: 'success',
      data: {
        fileId: data.id,
        fileName: data.name,
        webViewLink: data.webViewLink,
      },
    });
  } catch (error) {
    console.error('Error updating file:', error.message);
    next(new AppError('Error updating file: ' + error.message, 500));
  }
};

// ƒê√°nh d·∫•u isDeleted trong model File
// c√≥ th·ªÉ gi·ªØ file tr√™n Google Drive
exports.deleteFile = async (req, res, next) => {
  try {
    const userId = req.user._id;
    const { fileDocId } = req.body; // ID c·ªßa document trong model File

    // Ki·ªÉm tra file trong model File
    const fileDoc = await File.findById(fileDocId).populate('taskId');
    if (!fileDoc || fileDoc.isDeleted) {
      return next(new AppError('Kh√¥ng t√¨m th·∫•y file ho·∫∑c file ƒë√£ b·ªã x√≥a', 404));
    }
    if (!fileDoc.uploadedBy.equals(userId)) {
      return next(new AppError('B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a file n√†y', 403));
    }

    const fileName = fileDoc.name;
    const task = fileDoc.taskId;

    try {
      // Thu h·ªìi quy·ªÅn chia s·∫ª tr√™n Google Drive
      await revokeFilePermissions(userId, fileDoc.googleDriveFileId);

      // X√≥a tr√™n Google Drive
      const auth = await authorize(userId, 'drive', DRIVE_SCOPES);
      const drive = google.drive({ version: 'v3', auth });
      await drive.files.delete({ fileId: fileDoc.googleDriveFileId });
    } catch (error) {
      console.error('Google Drive operation failed:', error.message);
      // Even if Google Drive operations fail, proceed with local deletion
    }

    // ƒê√°nh d·∫•u x√≥a trong model File
    fileDoc.isDeleted = true;
    fileDoc.deletedAt = Date.now();
    await fileDoc.save();

    // X√≥a file kh·ªèi task
    await Task.updateMany(
      { documents: fileDocId },
      { $pull: { documents: fileDocId } }
    );

    // Ghi activity log n·∫øu file thu·ªôc v·ªÅ task
    if (task) {
      try {
        const log = await ActivityLog.create({
          boardId: task.boardId,
          userId: userId,
          action: 'task_document_removed',
          targetId: task._id,
          targetType: 'task',
          details: `File "${fileName}" removed from task "${task.title}"`,
          isVisible: false, // Sensitive - only show to relevant users
        });

        // Emit to relevant users only (assignee, assigner, admins)
        const formattedLog = {
          logId: log._id,
          boardId: log.boardId,
          userId: log.userId,
          userName: req.user.fullname || 'Unknown User',
          action: log.action,
          details: log.details,
          isVisible: log.isVisible,
          createdAt: formatDateToTimeZone(log.createdAt),
        };

        // Get relevant users
        const relevantUsers = [];
        if (task.assignedTo) relevantUsers.push(task.assignedTo.toString());
        if (task.assignedBy) relevantUsers.push(task.assignedBy.toString());

        // Add board admins
        const BoardMembership = require('../models/boardMembershipModel');
        const admins = await BoardMembership.find({
          boardId: task.boardId,
          role: 'admin',
          isDeleted: false,
        }).select('userId');

        admins.forEach((admin) => {
          relevantUsers.push(admin.userId.toString());
        });

        // Remove duplicates and emit to each relevant user
        const uniqueUsers = [...new Set(relevantUsers)];
        uniqueUsers.forEach((userId) => {
          emitToUser(userId, 'task_activity', formattedLog);
        });

        // Send notification to assigned user if different from deleter
        if (task.assignedTo && !task.assignedTo.equals(userId)) {
          await NotificationService.createPersonalNotification({
            title: 'File is removed from task',
            content: `File "${fileName}" is removed from task "${task.title}"`,
            type: 'task_document_removed',
            targetUserId: task.assignedTo,
            targetWorkspaceId: task.workspaceId,
            createdBy: userId,
            taskId: task._id,
          });
        }
      } catch (logError) {
        console.error(
          'Error creating activity log for file deletion:',
          logError
        );
      }
    }

    res.status(200).json({
      status: 'success',
      message: 'Delete file successfully',
    });
  } catch (error) {
    console.error('Error deleting file:', error.message);
    next(new AppError('Error deleting file: ' + error.message, 500));
  }
};

// thu h·ªìi quy·ªÅn chia s·∫ª tr√™n Google Drive
async function revokeFilePermissions(userId, fileId) {
  const auth = await authorize(userId, 'drive', DRIVE_SCOPES);
  const drive = google.drive({ version: 'v3', auth });
  const { data } = await drive.permissions.list({ fileId });

  for (const permission of data.permissions) {
    // Skip owner and anyoneWithLink permissions
    if (permission.role === 'owner' || permission.id === 'anyoneWithLink') {
      continue;
    }
    try {
      await drive.permissions.delete({ fileId, permissionId: permission.id });
    } catch (error) {
      console.error(
        `Failed to revoke permission ${permission.id}:`,
        error.message
      );
      // Continue with other permissions even if one fails
    }
  }
}
