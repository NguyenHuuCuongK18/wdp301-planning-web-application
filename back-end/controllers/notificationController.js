const mongoose = require('mongoose');
const AppError = require('../utils/appError');
const { formatDateToTimeZone } = require('../utils/dateUtils');
const User = require('../models/userModel');
const NotificationUser = require('../models/notificationUserModel');
const Event = require('../models/eventModel');
const Membership = require('../models/memberShipModel');

// Helper function ƒë·ªÉ format date theo format Vi·ªát Nam
const formatDateForVN = (date) => {
  if (!date) return null;

  try {
    const d = new Date(date);
    if (isNaN(d.getTime())) return null;

    return new Intl.DateTimeFormat('vi-VN', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit',
      hour12: true,
      timeZone: 'Asia/Ho_Chi_Minh',
    }).format(d);
  } catch (error) {
    console.error('Error formatting date:', error);
    return null;
  }
};

exports.getUserNotifications = async (req, res, next) => {
  try {
    const userId = req.user._id;
    const { limit = 50, skip = 0 } = req.query;
    const limitNum = parseInt(limit);
    const skipNum = parseInt(skip);

    // Ki·ªÉm tra userId h·ª£p l·ªá
    const user = await User.findOne({ _id: userId, isDeleted: false });
    if (!user) {
      return next(new AppError('Ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ b·ªã x√≥a', 400));
    }

    // ƒê·∫øm t·ªïng s·ªë th√¥ng b√°o
    const totalCount = await NotificationUser.countDocuments({
      userId,
      isDeleted: false,
    });

    // Truy v·∫•n th√¥ng b√°o v·ªõi ph√¢n trang
    const notifications = await NotificationUser.find({
      userId,
      isDeleted: false,
    })
      .populate({
        path: 'notificationId',
        match: { isDeleted: false },
        select:
          'title content type targetUserId targetWorkspaceId boardId createdBy audienceType createdAt eventId taskId messageId',
        populate: [
          {
            path: 'messageId',
            model: 'Message',
            select: 'content userId eventId taskId createdAt',
            match: { isDeleted: false },
            populate: [
              {
                path: 'userId',
                model: 'User',
                select: 'fullname avatar',
              },
              {
                path: 'eventId',
                model: 'Event',
                select: 'title',
              },
              {
                path: 'taskId',
                model: 'Task',
                select: 'title',
              },
            ],
          },
          {
            path: 'createdBy',
            model: 'User',
            select: 'fullname avatar username',
          },
        ],
      })
      .sort({ createdAt: -1 })
      .skip(skipNum)
      .limit(limitNum)
      .lean();

    // ƒê·ªãnh d·∫°ng k·∫øt qu·∫£
    const formattedNotifications = await Promise.all(
      notifications
        .filter((n) => n.notificationId)
        .map(async (n) => {
          const baseNotification = {
            notificationId: n.notificationId._id,
            title: n.notificationId.title,
            // N·∫øu content l√† JSON (do workspace_invite), parse ra
            ...(function () {
              try {
                const parsed = JSON.parse(n.notificationId.content);
                return {
                  content: parsed.content || n.notificationId.content,
                  invitationToken: parsed.invitationToken,
                };
              } catch (e) {
                return { content: n.notificationId.content };
              }
            })(),
            type: n.notificationId.type,
            targetUserId: n.notificationId.targetUserId,
            targetWorkspaceId: n.notificationId.targetWorkspaceId,
            boardId: n.notificationId.boardId,
            createdBy: {
              userId: n.notificationId.createdBy?._id,
              fullname: n.notificationId.createdBy?.fullname,
              username: n.notificationId.createdBy?.username,
              avatar: n.notificationId.createdBy?.avatar,
            },
            audienceType: n.notificationId.audienceType,
            createdAt: n.notificationId.createdAt,
            eventId: n.notificationId.eventId,
            taskId: n.notificationId.taskId,
            messageId: n.notificationId.messageId,
            isRead: n.isRead,
            readAt: n.readAt ? formatDateForVN(n.readAt) : null,
            relatedUserId: n.relatedUserId,
            responseStatus: null, // Default value
            responded: false, // Default value
          };

          // N·∫øu l√† event invitation, l·∫•y participant status FROM EVENT HI·ªÜN T·∫†I
          if (
            n.notificationId.type === 'event_invitation' &&
            n.notificationId.eventId
          ) {
            try {
              const event = await Event.findById(n.notificationId.eventId);
              if (event && !event.isDeleted) {
                const participant = event.participants.find(
                  (p) => p.userId.toString() === userId.toString()
                );
                if (participant) {
                  baseNotification.responseStatus = participant.status;
                  baseNotification.responded = participant.status !== 'pending';

                  console.log(
                    `üìù Event invitation status for user ${userId}:`,
                    {
                      eventId: n.notificationId.eventId,
                      participantStatus: participant.status,
                      responded: participant.status !== 'pending',
                    }
                  );
                } else {
                  // Ng∆∞·ªùi d√πng kh√¥ng c√≤n trong danh s√°ch participants (c√≥ th·ªÉ b·ªã remove)
                  baseNotification.responseStatus = 'removed';
                  baseNotification.responded = true;
                }
              } else {
                // Event kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã x√≥a
                baseNotification.responseStatus = 'event_deleted';
                baseNotification.responded = true;
              }
            } catch (error) {
              console.warn('Error fetching event participant status:', error);
              baseNotification.responseStatus = 'error';
              baseNotification.responded = false;
            }
          }

          // N·∫øu l√† th√¥ng b√°o li√™n quan ƒë·∫øn tin nh·∫Øn
          if (
            n.notificationId.type === 'new_message' &&
            n.notificationId.messageId &&
            typeof n.notificationId.messageId === 'object'
          ) {
            baseNotification.message = {
              content: n.notificationId.messageId.content,
              sender: {
                userId: n.notificationId.messageId.userId?._id,
                fullname: n.notificationId.messageId.userId?.fullname,
                avatar: n.notificationId.messageId.userId?.avatar,
              },
              event: n.notificationId.messageId.eventId
                ? {
                    eventId: n.notificationId.messageId.eventId._id,
                    title: n.notificationId.messageId.eventId.title,
                  }
                : null,
              task: n.notificationId.messageId.taskId
                ? {
                    taskId: n.notificationId.messageId.taskId._id,
                    title: n.notificationId.messageId.taskId.title,
                  }
                : null,
              createdAt: n.notificationId.messageId.createdAt,
            };
          }

          // N·∫øu l√† workspace_invite, l·∫•y tr·∫°ng th√°i t·ª´ Membership
          if (
            n.notificationId.type === 'workspace_invite' &&
            n.notificationId.targetWorkspaceId
          ) {
            try {
              const membership = await Membership.findOne({
                workspaceId: n.notificationId.targetWorkspaceId,
                userId: userId,
              });
              if (membership) {
                baseNotification.invitationResponse =
                  membership.invitationStatus;
              }
            } catch (err) {
              baseNotification.invitationResponse = undefined;
            }
          }
          // N·∫øu l√† board_invite, l·∫•y tr·∫°ng th√°i t·ª´ BoardMembership
          if (n.notificationId.type === 'board_invite') {
            try {
              const boardMembership =
                await require('../models/boardMembershipModel').findOne({
                  boardId: n.notificationId.boardId,
                  userId: userId,
                });
              if (boardMembership) {
                baseNotification.invitationResponse =
                  boardMembership.invitationResponse;
                baseNotification.isDeleted = boardMembership.isDeleted;
                // N·∫øu membership ƒë√£ b·ªã x√≥a, ƒë√°nh d·∫•u ƒë·ªÉ lo·∫°i b·ªè ·ªü b∆∞·ªõc filter ph√≠a d∆∞·ªõi
                if (boardMembership.isDeleted) {
                  baseNotification._shouldHide = true;
                }
              } else {
                // N·∫øu kh√¥ng t√¨m th·∫•y membership, c≈©ng ·∫©n
                baseNotification._shouldHide = true;
              }
            } catch (err) {
              baseNotification.invitationResponse = undefined;
              baseNotification.isDeleted = undefined;
              baseNotification._shouldHide = true;
            }
          }

          return baseNotification;
        })
    );

    // Ch·ªâ gi·ªØ l·∫°i th√¥ng b√°o board_invite m·ªõi nh·∫•t cho m·ªói c·∫∑p (boardId, userId)
    const seenBoardInvites = new Map(); // key: boardId, value: notification (gi·ªØ notificationId l·ªõn nh·∫•t)
    const filteredNotifications = [];
    for (const notif of formattedNotifications) {
      if (notif.type === 'board_invite') {
        if (notif._shouldHide) continue;
        const key = notif.boardId?.toString?.() || '';
        // N·∫øu ƒë√£ c√≥ boardId n√†y, so s√°nh createdAt ƒë·ªÉ gi·ªØ c√°i m·ªõi nh·∫•t
        if (!seenBoardInvites.has(key)) {
          seenBoardInvites.set(key, notif);
        } else {
          // So s√°nh createdAt
          const prev = seenBoardInvites.get(key);
          if (new Date(notif.createdAt) > new Date(prev.createdAt)) {
            seenBoardInvites.set(key, notif);
          }
        }
      } else {
        filteredNotifications.push(notif);
      }
    }
    // Th√™m c√°c board_invite m·ªõi nh·∫•t v√†o danh s√°ch
    for (const notif of seenBoardInvites.values()) {
      filteredNotifications.push(notif);
    }
    // S·∫Øp x·∫øp l·∫°i theo th·ªùi gian t·∫°o (gi·∫£m d·∫ßn)
    filteredNotifications.sort(
      (a, b) => new Date(b.createdAt) - new Date(a.createdAt)
    );

    // T√≠nh to√°n pagination info
    const hasMore = skipNum + limitNum < totalCount;
    const currentPage = Math.floor(skipNum / limitNum) + 1;
    const totalPages = Math.ceil(totalCount / limitNum);

    res.status(200).json({
      status: 'success',
      results: filteredNotifications.length,
      pagination: {
        currentPage,
        totalPages,
        totalCount,
        hasMore,
        limit: limitNum,
        skip: skipNum,
      },
      data: {
        notifications: filteredNotifications,
      },
    });
  } catch (error) {
    console.error('Error in getUserNotifications:', error);
    next(new AppError(`L·ªói khi l·∫•y th√¥ng b√°o: ${error.message}`, 500));
  }
};

exports.markAsRead = async (req, res, next) => {
  const session = await mongoose.startSession();
  session.startTransaction();
  try {
    const userId = req.user._id; // L·∫•y userId t·ª´ token x√°c th·ª±c
    const { notificationId } = req.params; // L·∫•y notificationId t·ª´ URL params

    console.log(`üìñ Marking notification as read:`, {
      notificationId,
      userId: userId.toString(),
    });

    // Ki·ªÉm tra th√¥ng b√°o h·ª£p l·ªá
    const notificationUser = await NotificationUser.findOne({
      notificationId,
      userId,
      isDeleted: false,
    }).session(session);

    if (!notificationUser) {
      await session.abortTransaction();
      session.endSession();
      return next(
        new AppError('Th√¥ng b√°o kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng thu·ªôc v·ªÅ b·∫°n', 404)
      );
    }

    // Ch·ªâ c·∫≠p nh·∫≠t n·∫øu ch∆∞a ƒë∆∞·ª£c ƒë·ªçc
    if (!notificationUser.isRead) {
      notificationUser.isRead = true;
      notificationUser.readAt = new Date();
      await notificationUser.save({ session });

      console.log(`‚úÖ Notification marked as read:`, {
        notificationId,
        userId: userId.toString(),
        readAt: notificationUser.readAt,
      });
    } else {
      console.log(`‚ÑπÔ∏è Notification already read:`, {
        notificationId,
        userId: userId.toString(),
      });
    }

    await session.commitTransaction();

    res.status(200).json({
      status: 'success',
      message: 'ƒê√£ ƒë√°nh d·∫•u th√¥ng b√°o l√† ƒë√£ ƒë·ªçc',
      data: {
        notificationId: notificationUser.notificationId,
        isRead: notificationUser.isRead,
        readAt: formatDateForVN(notificationUser.readAt),
      },
    });
  } catch (error) {
    await session.abortTransaction();
    console.error('Error in markAsRead:', error);
    next(new AppError(`L·ªói khi ƒë√°nh d·∫•u th√¥ng b√°o: ${error.message}`, 500));
  } finally {
    session.endSession();
  }
};
